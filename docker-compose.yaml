version: '3.7'

services:
  nginx:
    build:
      context: ./nginx
      network: host
    image: shane-redapi-nginx:latest
    deploy:
      mode: global
      resources:
        limits:
          cpus: '2.0'
          memory: 50M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"
        - "traefik.http.routers.STACK_NAME-http.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-http.entrypoints=http"
        - "traefik.http.routers.STACK_NAME-http.middlewares=https-redirect"
        - "traefik.http.routers.STACK_NAME-https.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-https.entrypoints=https"
        - "traefik.http.routers.STACK_NAME-https.tls=true"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.port=80"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.scheme=http"
    volumes:
      - data_dir:/data
    secrets:
      - source: cssnr_basic_http_auth
        target: /etc/nginx/auth.users
    depends_on:
      - app
      #- flower
      - redis-commander
      #- uptime-kuma
      #- pgadmin
    networks:
      - redbot-internal
    ports:
      - "80:80"

  app:
    build:
      context: ./app
      network: host
    image: shane-redapi-app:latest
    env_file: settings.env
    command: "gunicorn myapp.wsgi:application -b 0.0.0.0:9000 -w 2"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9000/app-health-check/"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      mode: global
      resources:
        limits:
          cpus: '2.0'
          memory: 250M
    volumes:
      - data_dir:/data
    networks:
      - redbot-internal

#  worker:
#    image: shane-redapi-app:${VERSION}
#    env_file: ${ENV_FILE}
#    command: "celery -A myapp worker -l INFO -c 2"
#    deploy:
#      replicas: 1
#      resources:
#        limits:
#          cpus: '2.0'
#          memory: 200M
#    depends_on:
#      - app
#      - redis

#  beat:
#    image: ${REGISTRY_HOST}/shane/redapi-app:${VERSION}
#    env_file: ${ENV_FILE}
#    command: "celery -A myapp beat -l INFO -S django"
#    deploy:
#      replicas: 1
#      resources:
#        limits:
#          cpus: '2.0'
#          memory: 150M
#    depends_on:
#      - app
#      - redis

#  flower:
#    image: mher/flower:latest
#    env_file: ${ENV_FILE}
#    deploy:
#      replicas: 1
#    volumes:
#      - flower_data:/data
#    networks:
#      - net-internal
#    depends_on:
#      - app
#      - redis

  redis:
    image: redis:6-alpine
    command: "redis-server --appendonly yes"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 50M
    volumes:
      - redis_data:/data
    networks:
      - redbot-internal

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379:0,local:redis:6379:1
      - URL_PREFIX=/redis
      - TRUST_PROXY=true
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 100M
    depends_on:
      - redis
    networks:
      - redbot-internal

secrets:
  cssnr_basic_http_auth:
    file: ~/basic_http_auth

volumes:
  data_dir:
#  flower_data:
  redis_data:

networks:
  redbot-internal:
    name: "${ENV_NAME:-local}-cssnr-carlbot-internal"
    external: true
