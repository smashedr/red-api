version: '3.7'

services:
  nginx:
    build:
      context: ./nginx
      network: host
    image: ${REGISTRY_HOST}/shane/myapp-nginx:${VERSION}
    deploy:
      mode: global
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"
        - "traefik.http.routers.STACK_NAME-http.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-http.entrypoints=http"
        - "traefik.http.routers.STACK_NAME-http.middlewares=https-redirect"
        - "traefik.http.routers.STACK_NAME-https.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-https.entrypoints=https"
        - "traefik.http.routers.STACK_NAME-https.tls=true"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.port=80"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.scheme=http"
    volumes:
      - data_dir:/data
    secrets:
      - source: cssnr_basic_http_auth
        target: /etc/nginx/auth.users
    networks:
      - traefik-public
      - net-internal
    depends_on:
      - app
#      - flower
      - redis-commander

  app:
    build:
      context: ./app
      network: host
    image: ${REGISTRY_HOST}/shane/myapp-app:${VERSION}
    env_file: ${ENV_FILE}
    command: "gunicorn myapp.wsgi:application -b 0.0.0.0:9000 -w 2"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9000/app-health-check/"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      mode: global
    volumes:
      - data_dir:/data
    networks:
      - net-internal
    depends_on:
      - redis

#  worker:
#    image: ${REGISTRY_HOST}/shane/myapp-app:${VERSION}
#    env_file: ${ENV_FILE}
#    command: "celery -A myapp worker -l INFO -c 2"
#    deploy:
#      replicas: 1
#    networks:
#      - net-internal
#    depends_on:
#      - app
#      - redis
#
#  beat:
#    image: ${REGISTRY_HOST}/shane/myapp-app:${VERSION}
#    env_file: ${ENV_FILE}
#    command: "celery -A myapp beat -l INFO -S django"
#    deploy:
#      replicas: 1
#    networks:
#      - net-internal
#    depends_on:
#      - app
#      - redis

  redis:
    image: redis:6-alpine
    command: "redis-server --appendonly yes"
    deploy:
      replicas: 1
    volumes:
      - redis_data:/data
    networks:
      - net-internal

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379:0,local:redis:6379:1
      - URL_PREFIX=/redis
      - TRUST_PROXY=true
    deploy:
      replicas: 1
    networks:
      - net-internal
    depends_on:
      - redis

#  flower:
#    image: mher/flower:latest
#    env_file: ${ENV_FILE}
#    deploy:
#      replicas: 1
#    volumes:
#      - flower_data:/data
#    networks:
#      - net-internal
#    depends_on:
#      - app
#      - redis

secrets:
  cssnr_basic_http_auth:
    external: true

volumes:
  data_dir:
  flower_data:
  redis_data:

networks:
  net-internal:
    driver: overlay
  traefik-public:
    external: true
